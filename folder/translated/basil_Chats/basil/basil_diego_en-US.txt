[10.02.22 10:17:05] diego: hi
[10.02.22 11:50:27] basil: hello
[10.02.22 11:58:16] diego: elroy, tells me you can get sources of noiser.exe
[10.02.22 12:03:23] basil: yes
[10.02.22 12:04:16] diego: ok
[10.02.22 12:04:32] basil: can i download?
[10.02.22 12:04:52] diego: yes,
[10.02.22 12:05:14] basil: okay. I'll look for it now. As soon as it's ready, I'll let you know. ok?
[10.02.22 12:05:29] diego: I'm trying to defeat NOD, but it clings to the generated code
[10.02.22 12:06:43] basil: can i have a key for pgp?
[10.02.22 12:07:52] diego: -----BEGIN PGP PUBLIC KEY BLOCK-----
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
=dnme
-----END PGP PUBLIC KEY BLOCK-----
[10.02.22 12:08:13] diego: Comment: User ID: diego
Comment: Creation date: 23.12.2021 23:52
Comment: Valid until: 23.12.2023 12:00
Comment: Type: 4 096 bit RSA (secret key available)
Comment: Application: Signature, Encryption, User Authentication
Comment: fingerprint: E97CD881ED0EA5475B22AA2566B30B8090491863
[10.02.22 12:08:50] basil: ok
[10.02.22 12:14:11] basil: https://file.io/2hdPHEq2tBk4
[10.02.22 12:14:15] basil: try to decode
[10.02.22 12:14:26] basil: If everything's okay, I'll send you the project
[10.02.22 12:18:33] diego: gpg: encrypted with RSA key 5BD15A54B6D74EC3
[10.02.22 12:18:49] diego: no, it doesn't decrypt
[10.02.22 12:20:54] basil: a moment
[10.02.22 12:21:03] basil: maybe did something wrong
[10.02.22 12:23:19] basil: https://file.io/xUSCegaujfbo
[10.02.22 12:23:32] basil: please try again
[10.02.22 12:24:53] diego: strange, but it writes the same thing
[10.02.22 12:25:22] basil: I must have something wrong
[10.02.22 12:25:28] basil: I use it wrong
[10.02.22 12:26:16] diego: archive to rar or zip with password
[10.02.22 12:26:32] basil: ok
[10.02.22 12:26:42] basil: let's do that
[10.02.22 12:29:44] basil: test
[10.02.22 12:31:32] basil: can you hear me?
[10.02.22 12:31:37] diego: lf
[10.02.22 12:31:39] diego: yes
[10.02.22 12:31:45] basil: good
[10.02.22 12:31:54] basil: https://file.io/ci6Y6i0oXYnM
[10.02.22 12:31:59] basil: nwFVg4FxTCl4VZfznZLLb9vt1Fp#mi@?6Fm6hB?p7INpm#g@l6
[10.02.22 12:32:13] basil: let me know what unzipped
[10.02.22 12:32:56] diego: yes, thank you.
[10.02.22 12:33:01] basil: wait
[10.02.22 12:33:07] basil: there's one more thing
[10.02.22 12:33:20] basil: how to use
[10.02.22 12:33:25] basil: use it
[10.02.22 12:33:31] basil: I'll send it over
[10.02.22 12:33:48] basil: nwFVg4FxTCl4VZfznZLLb9vt1Fp#mi@?6Fm6hB?p7INpm#g@l6
[10.02.22 12:34:28] basil: https://file.io/4aCJRd1tE9iG
[10.02.22 12:36:57] diego: got it, kinda like before, and elroy said the sixth digit appeared
[10.02.22 12:37:44] basil: I don't understand about "the sixth digit"
[10.02.22 12:38:28] basil: more details
[10.02.22 12:38:46] diego: elroy: And there should be 6 digits
Basil probably has this algorithm corrected
[10.02.22 12:38:58] diego: I don't know
[10.02.22 12:39:20] diego: he says so, maybe he forgot something
[10.02.22 12:40:15] diego: does your NOD detect?
[10.02.22 12:41:05] basil: I'm a bit away from cryptors now. I can not say with certainty.
[10.02.22 12:41:15] basil: But last time it was clean
[10.02.22 12:42:42] diego: the main thing now is to have the source, but the git is lying, and no one has the truth
[10.02.22 12:43:04] diego: well you have it preserved
[10.02.22 12:43:16] basil: what is this "sixth digit"
[10.02.22 12:43:52] diego: I'm afraid you'll only find that out from elroy
[10.02.22 12:44:03] diego: or not
[10.02.22 12:44:09] basil: yeah, I wrote. Maybe he went somewhere.
[10.02.22 12:44:28] diego: he also has no source code
[10.02.22 12:44:53] basil: there's another one
[10.02.22 12:44:58] basil: source
[10.02.22 12:45:09] basil: maybe you should send it too?
[10.02.22 12:45:21] basil: I just do not remember exactly which one
[10.02.22 12:46:17] basil: if it doesn't work - write me
[10.02.22 12:54:30] diego: yes, ok, thanks
[10.02.22 13:30:01] basil: figured out "six digits"
[10.02.22 13:30:10] basil: there's another project
[10.02.22 13:30:15] basil: I'll send it over
[10.02.22 13:30:48] diego: yes, and you have an old version
[10.02.22 13:31:30] diego: there's a function
RandGenerator::RandGenerator() {
	random_ctx = GetRandomContext();
}
[10.02.22 13:32:01] diego: and it should be
RandGenerator::RandGenerator() {
	random_ctx = GetRandomContext();
	int a[4];
	 __cpuid(a, 1);
	 support_native_random = a[2] & 0x40000000;
}
[10.02.22 13:33:24] basil: moment
[10.02.22 13:33:27] basil: let me have a look
[10.02.22 13:33:55] diego: not all machines have hardware random, and if not then _rdrand32_step(&hardRand) flies out
[10.02.22 13:34:21] diego: not me in particular
[10.02.22 13:35:00] basil: added. Number of parameters 6. I will send you.
[10.02.22 13:35:29] basil: only what is support_native_random?
[10.02.22 13:35:37] basil: Personally, I had no such a thing
[10.02.22 13:36:11] diego: I was adding a support_native_random check
[10.02.22 13:37:44] basil: you have to declare it somewhere. What type is it? Or will you add it yourself?
[10.02.22 13:38:10] diego: i did
[10.02.22 13:39:37] diego: we just at some point discussed it and posted in a chat, I thought that already took it into account everywhere, and this is an old version.
[10.02.22 13:40:23] diego: and it seems who has hardware support, it just does not steam
[10.02.22 13:41:08] diego: if interested
`class RandGenerator
{
	DWORD random_ctx;
	DWORD GetRandomContext();
	DWORD GetRandom(DWORD* randomContext);

public:
	RandGenerator();
	DWORD GetRandom(DWORD max = (MAXDWORD-1));

};

`
[10.02.22 13:41:27] diego: that's a hider
[10.02.22 13:41:56] diego: #include <windows.h>
#include "intrin.h"

#include "RandGenerator.h"

RandGenerator::RandGenerator() {
	random_ctx = GetRandomContext();
	int a[4];
	 __cpuid(a, 1);
	 support_native_random = a[2] & 0x40000000;
}

DWORD RandGenerator::GetRandomContext()
{
	LARGE_INTEGER stamp;
	DWORD ret;
	QueryPerformanceCounter(&stamp);
	ret = stamp.LowPart * 1102511845 + 12345 + rand();
	return ((DWORD)(ret >> 16) & 0x7fff);
}

DWORD RandGenerator::GetRandom(DWORD* randomContext)
{
	*randomContext = *randomContext * 1102511845 + 12345;
	return *randomContext;
}

DWORD RandGenerator::GetRandom(DWORD max)
{
	//random_ctx = GetRandomContext();
	unsigned int hardRand;
	if (support_native_random)
		if (_rdrand32_step(&hardRand))
			return (DWORD)(hardRand%(max+1))
	return (GetRandom(&random_ctx) %(max+1));
}
[10.02.22 13:42:31] diego: this is sr
[10.02.22 13:43:27] diego: but for me it's okay, throw it in any form
[10.02.22 13:44:11] basil: ok. I'll send you the latest version. And it looks like I have nothing better.
[10.02.22 13:44:36] diego: i sent you the wrong hider
[10.02.22 13:44:39] diego: #pragma once
class RandGenerator
{
	DWORD random_ctx;
	Support_native_random bool;
	DWORD GetRandomContext();
	DWORD GetRandom(DWORD* randomContext);

public:
	RandGenerator();
	DWORD GetRandom(DWORD max = (MAXDWORD-1));

};
[10.02.22 13:44:52] basil: that's more like it
[10.02.22 13:44:53] basil: )))
[10.02.22 13:47:07] basil: nwFVg4FxTCl4VZfznZLLb9vt1Fp#mi@?6Fm6hB?p7INpm#g@l6
[10.02.22 13:47:52] basil: https://file.io/lKaTau3f5VKM
[10.02.22 13:49:17] basil: it seems to be the latest version
[10.02.22 13:49:30] basil: report how it behaves
[10.02.22 13:49:38] basil: please
[10.02.22 13:49:40] diego: got it
[10.02.22 13:49:45] diego: yeah sure
[10.02.22 13:49:53] basil: I just wish I had some feedback
[10.02.22 13:50:00] diego: did you fix the random?
[10.02.22 13:50:39] basil: Well, frankly speaking, I still haven't inserted your code. Although I got the project sorted out with it. There were no errors.
[10.02.22 13:50:42] basil: none
[10.02.22 13:51:59] diego: what you just sent, there's just this fix
[10.02.22 13:52:40] diego: and *randomContext = *randomContext * 1102511845 + 12345; - this line generates bad pseudorandom
[10.02.22 13:53:33] diego: there low bits 4 are repeated after eight requests
[10.02.22 13:54:35] basil: a moment
[10.02.22 13:56:35] basil: I understand you need another arithmetic expression....
[10.02.22 13:57:07] diego: if you need it at all
[10.02.22 13:57:47] diego: it's a crutch for machines without hardware support
[10.02.22 13:59:14] basil: and on the build machine, I guess, there's no hardware support
[10.02.22 13:59:35] diego: yeah, i think so
[10.02.22 14:02:07] basil: okay. How else can I help you?
[10.02.22 14:02:30] diego: I only know about my xenon, that it has no support. Just sometimes.
[10.02.22 14:02:51] diego: thank you, I'll take it from here.
[10.02.22 14:03:02] diego: I'll let you know what happens
[11.02.22 14:02:38] diego: hi
[11.02.22 14:03:18] basil: test
[11.02.22 14:03:30] basil: hello
[11.02.22 14:03:33] diego: test
[11.02.22 14:03:44] diego: got a minute?
[11.02.22 14:03:52] basil: yes. listening
[11.02.22 14:04:51] diego: did you have to fight eset detection for code generated by noiser.exe?
[11.02.22 14:07:12] basil: had to. But essentially at that point elroy told me what I needed to do. We needed to make a big nesting depth of condition (if)
[11.02.22 14:07:26] basil: there it was necessary*
[11.02.22 14:08:53] diego: but he told me that the detection is mostly on code that initializes two variables at the beginning of function (which then goes through the conditions).
[11.02.22 14:09:11] diego: and IDA also showed
[11.02.22 14:09:27] basil: maybe something changed
[11.02.22 14:09:33] basil: could you tell me more
[11.02.22 14:09:34] basil: ?
[11.02.22 14:09:54] basil: Preferably with some example
[11.02.22 14:12:30] diego: these are Elroy's words
[11.02.22 14:12:30] diego: There's a place where the code is generated which is inserted at the beginning of the function, in place of begin_function. There's code that defines two variables and their values, and it's the two branches that cause these two variables to be executed. So here is the code for generating values for these two variables. You change the code, the detection goes away. The lambda is generated there now.
[11.02.22 14:12:41] diego: STR code =
		"unsigned int " + strVar_a + "_ui;\r\n"
		"long " + strVar_a + "= __rdtscp(&" + strVar_a + "_ui) > 10000000 ? " + to_string(a) + " : 10000000 / __rdtscp(&" + strVar_a + "_ui);\r\n"
		"long " + strVar_b + "= static_cast<long>(( ((__int64)(__rdtscp(&" + strVar_a + "_ui) & 0xFFFFFFFF) * " + to_string(randGen.GetRandom(65535)) + " ) % 95) + 3);\r\n"
[11.02.22 14:13:36] diego: ipn crashed
[11.02.22 14:14:01] diego: reception
[11.02.22 14:14:06] basil: yes
[11.02.22 14:14:11] basil: on-line
[11.02.22 14:14:51] diego: did you get the text and sample code?
[11.02.22 22 14:14:59] basil: yes.
[11.02.22 14:15:09] basil: I saw those lambda's
[11.02.22 14:15:21] basil: there is another problem. Well, mine is like this.
[11.02.22 14:15:27] basil: this kind of problem
[11.02.22 14:16:02] basil: The code I generate to initialize the variables it works and the detector leaves
[11.02.22 14:16:04] basil: But...
[11.02.22 14:16:44] basil: If I run this binary, at the very end of function, if the condition is like
[11.02.22 14:17:49] basil: ``
if (vaiableLong>1000)
  goto beginObfuscFunc;
```
[11.02.22 14:18:08] basil: and this condition is always satisfied
[11.02.22 14:18:31] basil: so code execution goes to the beginning of the function.
[11.02.22 14:18:44] basil: This is a loop
[11.02.22 14:19:12] basil: The text came through
[11.02.22 14:19:16] basil: ?
[11.02.22 14:19:48] diego: I'm here
[11.02.22 14:19:52] diego: yes
[11.02.22 14:20:27] basil: I understand what I need to do so that this loop would not happen.
[11.02.22 14:20:39] basil: And to make the detector gone
[11.02.22 14:20:46] basil: do I understand it correctly?
[11.02.22 14:20:55] diego: not quite
[11.02.22 14:21:23] diego: my detection shows exactly on the function start
[11.02.22 14:22:10] basil: correct
[11.02.22 14:22:23] basil: I thought you said so above
[11.02.22 14:22:27] diego: I try to assign simple values to these two variables, like 1 and 2.
[11.02.22 14:22:34] basil: test
[11.02.22 14:23:27] diego: but as soon as I build some complicated variation, the detector returns
[11.02.22 14:24:33] basil: i.e. you have to make expressions simple? Just initialize 1 or 2. Or 3, for example.
[11.02.22 14:26:39] diego: removing obfuscation is a one-way street.
[11.02.22 14:29:00] basil: Question is, in what studio do you build your crypt?
[11.02.22 14:29:49] diego: Community 2019
[11.02.22 14:31:33] basil: Here's another thing. The problem may be in the studio. Because in 2022 I was building a crypt. There in the obfuscator, these variables were initialized using lambda functions (with the looping effect I described above). But the crypts themselves were clean in static. As I remember
[11.02.22 14:31:56] basil: Let me try to build it. See how AB reacts.
[11.02.22 14:32:57] diego: I have 2022 on my switch, now I'll try
[11.02.22 14:34:04] diego: and with code like

so it should not go into these conditions
if (( (long)(iLFLhVvvjfq+4<=SXDUvhaRDA)))
{
if (!(( yDhNoxvT))
 goto CCeIkiIaYr;

goto flwlVhVjyG;
}

I have all the return functions end and it doesn't seem to come to this
[11.02.22 14:35:27] basil: I have a loop going on for some reason. That's how it works. I checked it - I ran it under the debugger
[11.02.22 14:35:58] basil: Plus if I run it under debugger it just hangs in processes and nothing happens. Nothing happens
[11.02.22 14:36:33] basil: One more thing
[11.02.22 14:36:38] basil: power
[11.02.22 14:36:46] basil: ``
if (( (long)(iLFLhVvvjfq+4<=SXDUvhaRDA)))
```
[11.02.22 14:38:12] basil: if we take priority of operations, it means, that first we compare 4<=SXDUvhaRDA. and then we add up
[11.02.22 14:38:34] basil: i.e. it will be (long)(iLFLhVvvjfq+(4<=SXDUvhaRDA))
[11.02.22 14:38:44] basil: or not?
[11.02.22 14:43:28] diego: https://docs.microsoft.com/ru-ru/cpp/cpp/cpp-built-in-operators-precedence-and-associativity?view=msvc-160
they say + is higher priority than <=
[11.02.22 14:44:16] diego: today the internet is suffering
[11.02.22 14:44:45] basil: yes. Was wrong - was wrong.
[11.02.22 14:46:43] diego: I've already added a variability of initialization of these two variables, i.e. in each function initialization is different. But still detects
[11.02.22 14:47:32] basil: now I'll try it myself
[11.02.22 14:50:15] diego: just elroy said that you had encountered this problem, so I'm asking you questions.
I won't interrupt you,
and you have int argn = 6 in the parsing of input arguments; i.e. the parsing starts from the 6th argument
[11.02.22 14:54:46] basil: Listen, what if you set it to 0
[11.02.22 14:54:51] basil: ?
[11.02.22 14:55:52] diego: who?
[11.02.22 14:56:04] basil: int argn = 0
[11.02.22 14:56:34] diego: need 1
[11.02.22 14:56:46] basil: well, I mean yes
[11.02.22 14:56:47] diego: 0 is the program itself
[11.02.22 14:56:48] basil: by 1
[11.02.22 14:56:56] basil: excuse me
[11.02.22 14:57:30] basil: he actually does nested loops and conditions in the code
[11.02.22 14:57:32] basil: ,
[11.02.22 14:57:33] basil: ?
[11.02.22 14:57:52] basil: because GenComplexity m_code_complexity = { 2,2,2,2,2,3 }
[11.02.22 14:58:11] basil: This is in fact the complexity of the code which creates the obfuscator
[11.02.22 14:58:59] basil: No. It shouldn't affect complexity
[11.02.22 15:03:02] diego: and you gave me a version with only 5 digits
[11.02.22 15:05:01] basil: yes. first file
[11.02.22 15:05:09] basil: there were 5 digits
[11.02.22 15:07:56] diego: and the second one
[11.02.22 15:09:08] basil: stop
[11.02.22 15:09:19] basil: there's a code
[11.02.22 15:09:26] basil: ``
GenComplexity m_code_complexity = { 2,2,2,2,2,3 };
```
[11.02.22 15:09:35] basil: ?
[11.02.22 15:09:44] diego: `` second
[11.02.22 15:10:51] diego: yes there is
[11.02.22 15:11:18] basil: and in the first how much
[11.02.22 15:11:23] basil: must be five
[11.02.22 15:11:40] basil: ``
GenComplexity m_code_complexity = { 2,2,2,2,2};
```
[11.02.22 15:11:48] basil: It should be like this
[11.02.22 15:12:14] diego: yeah right
[11.02.22 15:13:01] basil: which obfuscator was used?
Where
```
GenComplexity m_code_complexity = { 2,2,2,2,2,3 };
```
[11.02.22 15:13:19] diego: yes
[11.02.22 15:13:44] diego: just there was a description where there is --code-complexity 4,2,4,2,6
[11.02.22 15:14:39] diego: and the argument parsing goes like this
bool str_to_complexity(char* str, GenComplexity** ppcomplex)
{
    GenComplexity* complex;
    int result, v, o, f, d, m;

    if (str == NULL || ppcomplex == NULL)
        return false;

    result = sscanf(str, "%d,%d,%d,%d,%d,%d", &v, &o, &f, &d, &m);
[11.02.22 15:15:36] basil: let me see now. Just a second
[11.02.22 15:17:01] basil: Yes.
[11.02.22 15:17:59] basil: Okay. You can wait about 20 minutes. I'll try to fix it.
[11.02.22 15:18:57] diego: and in one version elroy himself used a version of noiser, which he forwarded the sixth argument to
[11.02.22 15:19:39] basil: I remember that story. I gave that project to him. But I must have some not-so-latest version left
[11.02.22 15:42:23] basil: test
[11.02.22 15:42:23] basil: is it in place?
[11.02.22 15:42:43] diego: yes
[11.02.22 15:42:52] basil: I'll send it over
[11.02.22 15:42:54] basil: just a second
[11.02.22 15:45:11] basil: Vjb4V?kGNbf?~AhH15#FdYfieLqsvDR~vUdck7HlFj?EOA9ENr}GlKh
[11.02.22 15:45:20] basil: ``
Vjb4V?kGNbf?~AhH15#FdYfieLqsvDR~vUdck7HlFj?EOA9ENr}GlKh
```
[11.02.22 15:46:29] basil: https://file.io/cfknCpve9XM7
[11.02.22 15:46:40] basil: Try to build a project
[11.02.22 15:46:54] basil: and connect it to a crypto
[11.02.22 15:47:03] diego: ok
[11.02.22 15:48:25] basil: if we see what happens. Maybe the detection will go away. If something goes wrong write. We will further investigate what is wrong. I'm sorry for some mistakes. Just a long time ago was (with obfuscator)
[11.02.22 15:48:54] basil: Already honestly do not remember what I did there
[11.02.22 15:49:08] basil: And in what place were there errors
[11.02.22 15:50:30] diego: yes, thank you. let me try
[11.02.22 15:53:31] diego: the detector stayed
[11.02.22 15:54:58] diego: now I'll try, maybe something new will come out with the sixth argument
[11.02.22 15:55:49] basil: ok. Till what time tonight?
[11.02.22 15:56:28] diego: another 4 hours
[11.02.22 15:57:49] basil: I was just about to pass out in about 30 minutes
[11.02.22 15:58:45] diego: it's no problem, I figured it out from you
[11.02.22 15:59:23] basil: you should switch to obfuscation in rantime
[11.02.22 15:59:30] basil: things are going that way somehow
[11.02.22 16:00:02] diego: what kind of beast is this?
[11.02.22 16:01:21] basil: Well essentially garbage code that does nothing, but is present in the crypto and mixed in with actual code being corrupted.
[11.02.22 16:01:29] basil: if on assembler
[11.02.22 16:01:50] diego: no asm in 64
[11.02.22 16:01:50] basil: something like that would happen
nop
push eax
pop eax
[11.02.22 16:02:12] basil: I know
[11.02.22 16:02:18] basil: that's just an example
[11.02.22 16:03:01] basil: or like this
int i=4;

int i=0;
i++;
[11.02.22 16:03:13] basil: i++;
i++;
i++
[11.02.22 16:03:26] diego: the oprimizer will eat
[11.02.22 16:03:35] basil: yes . There is such a thing
[11.02.22 16:04:09] basil: Then you have to either turn off the optimizer at this sector or do something like that
[11.02.22 16:04:30] basil: int i=4;

int i =sqrt(16);
[11.02.22 16:04:31] diego: you can archive the code itself after compilation and leave only a small decoder that will unpack everything
[11.02.22 16:05:10] basil: yes. you can certainly do it that way. But I give you an example concerning obfuscation
[11.02.22 16:06:47] basil: I would do it too. But there's a jerk here from time to time. I just focus on the problem. Something else comes along.
[11.02.22 16:07:11] basil: And as always "urgent!"
[11.02.22 16:07:24] diego: Tell me about it
[11.02.22 16:08:04] basil: the decoder was also made by the way
[11.02.22 16:08:12] basil: but not separately
[11.02.22 16:08:40] diego: you can also write a small virtual machine and compile for it, and change the function codes every time
[11.02.22 16:08:52] basil: LLVM
[11.02.22 16:08:55] basil: ?
[11.02.22 16:10:09] diego: I mean, I need a simple language (like simplified SI) and use zubr.exe to build a compiler for the virtual machine
[11.02.22 16:10:32] basil: Frankly speaking, I'm not familiar with it.
[11.02.22 16:10:41] basil: I can't comment it in any way
[11.02.22 16:10:50] basil: comment
[11.02.22 16:10:52] diego: you get some kind of primitive JAVA
[11.02.22 16:11:16] diego: compile into intermediate code
[11.02.22 16:11:28] basil: I got it. Byte code and into binary embedded interpreter
[11.02.22 16:11:42] diego: yes
[11.02.22 16:11:49] diego: sort of.
[11.02.22 16:12:22] diego: but it's a virtual machine, though an interpreter is possible too
[11.02.22 16:12:38] basil: let's not swear)))
[11.02.22 16:12:59] basil: a virtual machine means a virtual machine)))
[11.02.22 16:13:01] diego: whatever you say
[11.02.22 16:14:17] diego: I once made an interpreter of a BASIC type premix language
[11.02.22 16:14:52] basil: )))
[11.02.22 16:15:18] basil: No. I certainly haven't
