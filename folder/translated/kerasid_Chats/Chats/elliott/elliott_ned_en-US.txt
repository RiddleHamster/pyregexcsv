[02.10.21 05:25:39] ned: hi!!!
[02.10.21 08:13:33] elliott: Hi.
[02.10.21 08:13:39] elliott: Why don't you sleep on Saturday?)
[02.10.21 08:16:21] ned: hi.
[02.10.21 08:16:26] ned: Waiting for payday.
[02.10.21 08:16:29] ned: no sleep
[02.10.21 08:16:44] elliott: I can't wait till Monday.
[02.10.21 08:17:03] ned: you know vininette well?
[02.10.21 08:17:21] ned: and who knows well, you know?
[02.10.21 08:17:27] elliott: I haven't even heard that word yet. What's that about?
[02.10.21 08:17:43] elliott: do you mean wininet from winapi32?
[02.10.21 08:17:52] ned: it's about C++ access to web pages (in my case)
[02.10.21 08:18:07] elliott: I poorly remember it was like 12 years ago. Any spp should know
[02.10.21 08:18:08] ned: Mine.
[02.10.21 08:18:29] ned: aren't you a coder/prog?
[02.10.21 08:18:33] elliott: i used it back in the day
[02.10.21 08:18:40] elliott: but that was the last time in maybe 11
[02.10.21 08:19:03] elliott: so I can't say I know her, I know she's there
[02.10.21 08:19:14] elliott: and the windup isn't xp for a long time)
[02.10.21 08:19:25] ned: what are you doing?
[02.10.21 08:19:29] elliott: web
[02.10.21 08:19:38] ned: that's what I need to do.
[02.10.21 08:19:41] elliott: I don't have a C++ enviroment either
[02.10.21 08:19:41] ned: tips
[02.10.21 08:19:47] ned: whatever
[02.10.21 08:19:51] elliott: by webom, I mean website building. what do you need?
[02.10.21 08:19:56] ned: not for programming
[02.10.21 08:20:30] ned: I need to instantly track the appearance of information on the page in the Internet. I'm counting on milliseconds.
[02.10.21 08:20:44] ned: the event happens 4-6 times a month
[02.10.21 08:20:58] ned: I'm scanning this page 10 times per second
[02.10.21 08:21:16] elliott: what kind of site?
[02.10.21 08:21:31] elliott: does the page update automatically or will the info appear only after reloading?
[02.10.21 08:21:33] ned: I would like to find a way to detect changes in the page so that I don't have to download gigabytes of information. My page now weighs 140K.
[02.10.21 08:21:48] ned: here is the page https://www.binance.com/en/support/announcement/c-48?navId=48
[02.10.21 08:22:23] ned: I don't know how anything gets there
[02.10.21 08:23:11] elliott: well, there's a list of articles
[02.10.21 08:23:20] elliott: some kind of announcement
[02.10.21 08:23:28] ned: whatever.
[02.10.21 08:23:42] ned: these articles are added there from time to time
[02.10.21 08:24:04] ned: i need to feel these additions. and react to certain ones
[02.10.21 08:24:46] elliott: open the inspector in chrome
[02.10.21 08:24:55] ned: 1. the simple solution is to read the whole page. 10 p/sec x 150 Kb
[02.10.21 08:25:02] ned: I did.
[02.10.21 08:25:07] elliott: https://www.binance.com/bapi/composite/v1/public/cms/article/catalog/list/query?catalogId=48&pageNo=1&pageSize=15
[02.10.21 08:25:08] ned: f12
[02.10.21 08:25:18] elliott: you don't have to fucking read it, you have a ready request in the inspector
[02.10.21 08:25:25] elliott: jerk it off and parse it
[02.10.21 08:25:30] elliott: until you get tired, that's all
[02.10.21 08:26:01] ned: you're a genius from my point of view
[02.10.21 08:26:18] elliott: the answer is structured
[02.10.21 08:26:32] ned: like json?
[02.10.21 08:26:37] elliott: yes, open the link
[02.10.21 08:26:37] ned: that's what I need
[02.10.21 08:26:42] ned: I did
[02.10.21 08:26:49] ned: I'm blind
[02.10.21 08:26:56] ned: but you see!
[02.10.21 08:27:02] ned: Yiddish
[02.10.21 08:27:03] elliott: Well, I just know what to look for.
[02.10.21 08:27:16] elliott: although it's not typical for this kind of page
[02.10.21 08:27:17] ned: that's why I've been hunting you all morning
[02.10.21 08:27:18] elliott: but it worked
[02.10.21 08:27:20] elliott: ))
[02.10.21 08:27:26] ned: you know what elliot waves are?
[02.10.21 08:27:35] elliott: no. what is it?
[02.10.21 08:27:44] ned: your waves are good
[02.10.21 08:28:01] ned: actually, the patterns of price changes in the market
[02.10.21 08:28:15] elliott: i wouldn't advise looking for patterns
[02.10.21 08:28:17] elliott: there are none
[02.10.21 08:28:34] ned: https://yandex.ru/search/?from=chromesearch&clid=2224314&text=djkys+%27kkbjnf&lr=213
[02.10.21 08:28:40] ned: I'm not looking
[02.10.21 08:28:40] elliott: in the same years when I was using vininet, that's exactly what I was using it for
[02.10.21 08:28:45] elliott: neural network looking for patterns
[02.10.21 08:28:48] elliott: And they didn't find any.
[02.10.21 08:28:51] ned: I have cool simple methods
[02.10.21 08:32:20] elliott: that's it, I'm out of here)
[02.10.21 08:32:58] ned: thank you
[02.10.21 08:34:05] elliott: nz)
[02.10.21 11:21:45] ned: ran back? There's no way I can find the resource address you told me in the browser console. Give me a vodka!
[02.10.21 11:22:50] ned: well, maybe not in the console, but by F12 that pops up.
[10.04.21 09:48:21] ned: hi!
[04.10.21 10:57:45] elliott: re
[04.10.21 10:57:48] elliott: koo
[04.10.21 10:57:51] elliott: you wrote what?
[04.10.21 12:53:12] ned: Yes, I did.
[26.10.21 08:44:51] elliott: Hi.
[26.10.21 08:48:06] elliott: why is the link in brackets?
[26.10.21 08:48:20] elliott: text looks like b64
[26.10.21 08:50:47] elliott: I still don't understand it well, so it's not the site, but some telegram channel?
[26.10.21 08:51:59] elliott: so maybe it's just a link encoded in this shit?
[26.10.21 08:55:20] elliott: that's not a fact easily...
[26.10.21 08:55:45] elliott: It's not a decrypter.
[26.10.21 08:55:52] elliott: I just saw it on the tip of my ear.
[26.10.21 08:57:07] elliott: it may turn out to be a binary
[26.10.21 08:57:15] elliott: I took it from the chrome console
[26.10.21 08:57:41] elliott: I looked for it later and couldn't find it, but it was right there
[26.10.21 08:58:42] elliott: it didn't seem strange to me at all, I opened it and saw
[26.10.21 08:58:47] elliott: you're not going anywhere
[26.10.21 08:58:54] elliott: You can't hide it.
[26.10.21 09:22:09] elliott: it would be good if there was a site where you could see what and how you could decode it
[26.10.21 09:22:17] elliott: just having a string would be a long guess
[26.10.21 09:23:12] elliott: he's telling me I need a cart
[26.10.21 09:23:57] elliott: it has to be registered to the phone
[26.10.21 09:24:44] elliott: yeah, but not on the kind of computer where we have this here. See
[26.10.21 09:24:49] elliott: the channel preview opened
[26.10.21 09:24:54] elliott: There's a list of posts
[26.10.21 09:25:21] elliott: and on the 22nd the first post isn't decrypted either
[26.10.21 09:25:56] elliott: is everything okay on your site under the wind?
[26.10.21 09:26:32] elliott: well, on this channel where the message is encrypted
[26.10.21 09:27:01] elliott: you said it's okay on the windows. or did you mean the telegram app on the windows is showing fine
[26.10.21 09:28:02] elliott: in this message I think it's just a preview of the news headline, and the link is there anyway in a normal form.
[26.10.21 09:28:13] elliott: I have the opposite, the base is a ten, it has VM with Ubuntu
[26.10.21 09:28:55] elliott: ten, I don't know how fucking safe it is
[26.10.21 09:29:29] elliott: it shows up fine in the browser
[26.10.21 09:31:03] elliott: I opened a channel in Mozilla, yes, the text is encrypted, but the link in it is normal
[26.10.21 09:33:29] elliott: So what's the difference? in the app, you click and confirm it the same way
[26.10.21 09:35:19] elliott: You're driving me fucking nuts.
[26.10.21 09:35:48] elliott: here's another fucking thing for you
[26.10.21 09:35:49] elliott: https://gchq.github.io/CyberChef/
[26.10.21 09:35:52] elliott: Just in case
[26.10.21 09:36:00] elliott: since you like stuff like that
[26.10.21 09:37:06] elliott: on the left side are the ingredients, in the center is a kind of cooking plate. you drag and drop a component there. on the top right is the source text, below is the cooking result. The components can be combined in any order
[26.10.21 09:37:10] elliott: I used to get high.
[26.10.21 09:37:26] elliott: the most fucked up online
[26.10.21 09:37:51] elliott: the code is hard to decipher because it may be broken, may not make sense at all and so on, or may be six times wrapped in salt
[26.10.21 09:38:14] elliott: what's your option again? I set up a cart. It's the same.
[26.10.21 09:39:10] elliott: that's exactly why it's for publication. If it fluffs a list of posts to the front, and one didn't decrypt, then what? then it's not the lib on the site that's crooked, it's the post
[26.10.21 09:39:57] elliott: so far I still don't understand
[26.10.21 09:40:26] elliott: you get the link code where, from where, and what does it look like?
[26.10.21 09:40:57] elliott: What do you mean? You gave me the url
[26.10.21 09:41:55] elliott: I think forget it, something went wrong on the server if it was always text
[26.10.21 09:42:02] elliott: https://t.me/binance_announcements1 yeah
[26.10.21 09:42:09] elliott: it's got this message wrong, it's her
[26.10.21 09:42:17] elliott: there's three channels on that link
[26.10.21 09:42:33] elliott: well, you can ignore things you don't understand
[26.10.21 09:42:35] elliott: things
[26.10.21 09:43:25] elliott: i do. but so far it was once and most likely by mistake. i don't fuck with the trolley protocol in the shower, but i think it's real textual
[26.10.21 09:43:54] elliott: the part that's not encrypted, but like the news there is different, will be in some json
[26.10.21 09:45:23] elliott: That's bullshit.
[26.10.21 09:45:31] elliott: So my point is, don't sweat it.
[26.10.21 13:51:23] elliott: What's the genius in it? I thought you knew about it
[26.10.21 13:52:20] elliott: it's not me who's genius, it's our chat, I just got your messages.
[26.10.21 13:52:54] elliott: I'm pleased that I do not know how, but helped)
[26.10.21 13:53:02] elliott: but you figured it out all the same
[26.10.21 13:54:25] elliott: good)) although I do not believe in exchanges as a source of income, but I've seen those who were able to play on such second differences, so I'm even curious
[26.10.21 13:55:35] elliott: on neural networks, I hope?
[26.10.21 13:56:13] elliott: times change) 10 years ago I was making a robot on a neural network) and now a pool of networks
[26.10.21 13:56:21] elliott: young people are growing))
[26.10.21 13:57:03] elliott: 10 years ago
[26.10.21 13:57:20] elliott: robot for technical analysis
[26.10.21 13:57:31] elliott: so i don't think so) especially after a year of fucking around i found out it was all bullshit
[26.10.21 13:57:56] elliott: i know
[26.10.21 13:58:05] elliott: that's why I say my experience is so, is - and thank god
[26.10.21 13:58:26] elliott: But we didn't invent a robot for news analysis
[26.10.21 13:58:43] elliott: Maybe the Internet wasn't that developed and there was no crypto
[26.10.21 13:59:04] elliott: now everything is so fast and so much
[26.10.21 14:00:06] elliott: it's not a problem to be a noda if i don't get busted by the fsb, but 1000 bucks is a problem
[26.10.21 14:00:37] elliott: you know we don't get paid enough here to give a fuckin' cop here, a cop there, a cop there
[26.10.21 14:01:21] elliott: yeah, tell me a broker's got a shoulder to lean on
[26.10.21 14:01:28] elliott: I'll go straight to hell.)
[26.10.21 14:01:31] elliott: played that already
[26.10.21 14:02:26] elliott: yeah, what?
[26.10.21 14:02:33] elliott: I've never seen an altruist before.
[26.10.21 14:03:25] elliott: it's not a fact that i'm brilliant and experienced, but come on, bullshit is always
[27.10.21 13:00:41] elliott: hi.
[27.10.21 13:01:09] elliott: no.
[27.10.21 13:01:25] elliott: )
[27.10.21 13:02:38] elliott: Yeah, go ahead.)
[27.10.21 13:03:47] elliott: You overestimated my knowledge of exchanges
[27.10.21 13:04:40] elliott: )
[29.10.21 14:49:18] elliott: you're always off the grid
[10/29/221 14:52:50] elliott: it says something like ability of simultaneous execution of threads is limited by physical number of cores in processor, and if you try to increase number of simultaneous execution of threads then system has to waste more and more resources for it, freezing one, unloading another, switching contexts and so on
[29.10.21 14:53:03] elliott: with infinite scaling there aren't enough resources
[29.10.21 14:53:24] elliott: well, you wrote it right.
[29.10.21 14:55:41] elliott: that's what the OS does, you just ask it to allocate a thread inside the process...
[29.10.21 14:55:50] elliott: Of course fucking speed questions are fucking great
[29.10.21 14:56:33] elliott: the question is to show the code better to scale the problem
[29.10.21 15:02:00] elliott: i dick knows, i need to dive into multithreading theory and sit read
[29.10.21 15:02:20] elliott: I'm not ready to answer right away
[29.10.21 15:03:25] elliott: threads by themselves process one core of the processor, and the cores are supposedly distributed by the operating system
[29.10.21 15:03:41] elliott: process is assigned to a core and threads live inside the process
[29.10.21 15:04:12] elliott: there's an exponential law which shows that it takes almost a third of the time to switch between them
[29.10.21 15:04:31] elliott: I don't think it will be in the Olympiad problem for kids - processes rule
[29.10.21 15:05:05] elliott: so you yourself wrote that with increasing number more and more time will be occupied by just fucking with contexts instead of useful work...
[29.10.21 15:06:27] elliott: Amd law
[29.10.21 15:06:39] elliott: that's what's adding up the running time with more threads
[29.10.21 15:06:47] elliott: what about optimization - fuck knows
[29.10.21 15:07:39] elliott: you're asking me for theoretical knowledge from 10 years ago lectures
[29.10.21 15:07:53] elliott: that was listened to at uni and was fucking usable in life
[29.10.21 15:07:55] elliott: (
[29.10.21 15:08:26] elliott: Oh, sure.)
[29.10.21 15:08:31] elliott: The trudes are everything
[29.10.21 15:09:02] elliott: dreadlocks.
[10.01.22 13:36:07] ned: hi!
[11.01.22 10:03:10] ned: hi!
[11.01.22 10:04:59] elliott: hi!
[11.01.22 10:05:27] ned: you can critique my masterpiece in C++. I wrote a macro.
[11.01.22 10:06:49] elliott: it's hard to say, I can just look it up
[11.01.22 10:07:02] elliott: I don't have anything for c++ on my machine, what kind of macro?
[11.01.22 10:07:12] ned: #define tsmart(var,type,size) std::unique_ptr<type[]> _##var(new type[size + 1]);type *var = _#var.get();
// tsmart(cSolutionDir, CHAR, 800);
// strcpy(cSolutionDir, "askjdhsdjkhasjkasdh");
no local HeapAlloc is needed
and you don't need to free anything
and the stack is dimensionless
only 2x8 bytes
by two pointers
[11.01.22 10:07:27] ned: to work with memory
[11.01.22 10:07:45] ned: time for local variables
[11.01.22 10:07:51] ned: and areas
[11.01.22 10:08:56] elliott: you wouldn't invent a wheel, you would take sdtlib and use
[11.01.22 10:09:12] ned: I do
[11.01.22 10:09:28] ned: except I don't have
[11.01.22 10:09:28] elliott: so why bother inventing memory allocation function)
[11.01.22 10:09:38] ned: how to allocate?
[11.01.22 10:09:41] elliott: what's so new to write
[11.01.22 10:09:54] ned: that's how you should write new split
[11.01.22 10:09:55] elliott: the main rule - as many new as divides
[11.01.22 10:10:00] ned: and not to forget
[11.01.22 10:10:10] ned: not here (you're good at it)
[11.01.22 10:10:17] elliott: there is new
[11.01.22 10:10:19] elliott: but no delites
[11.01.22 10:10:24] elliott: and it's all gonna end badly)
[11.01.22 10:10:26] ned: but you don't need delite
[11.01.22 10:10:31] ned: this is a smar link
[11.01.22 10:10:42] elliott: I understand, while it's on the stack, the system will clean it up itself
[11.01.22 10:10:48] ned: yes
[11.01.22 10:10:49] elliott: but I don't know why I need it
[11.01.22 10:10:55] ned: call destructor
[11.01.22 10:11:16] ned: memory is needed for work
[11.01.22 10:11:22] elliott: i think it's typical for all beginners, "why the fuck can't i fuck an array of undefined size, how can i code here???")
[11.01.22 10:11:25] elliott: it passes with experience
[11.01.22 10:11:26] ned: are you just running commands without data?
[11.01.22 10:11:44] ned: you're a genius
[11.01.22 10:11:49] ned: I already told you that
[11.01.22 10:11:54] elliott: I remember, I was using sdt and something like vectors
[11.01.22 10:12:09] elliott: but it was so long ago, I don't even know what else was added to the standard
[11.01.22 10:12:12] ned: I don't need a vector
[11.01.22 10:12:20] ned: I need continuous area
[11.01.22 10:12:24] ned: no objects
[11.01.22 10:12:29] ned: instances
[11.01.22 10:12:34] ned: there is a word
[11.01.22 10:12:36] ned: eternity
[11.01.22 10:12:37] elliott: well, you don't pick out a continuous area of indefinite size in any language
[11.01.22 10:12:44] ned: why stick it into a vector
[11.01.22 10:12:55] ned: I wrote a macro
[11.01.22 10:13:04] ned: it selects unspecified length
[11.01.22 10:13:05] elliott: if you need it, you expand it as needed, and if you need to write a macro, you invent pphp
[11.01.22 10:13:13] ned: instead of 800 put infinity
[11.01.22 10:13:16] elliott: I think vectors were allocating memory for themselves too
[11.01.22 10:13:22] elliott: but I could be wrong
[11.01.22 10:13:31] ned: why the hell would I need a vector to store the word you
[11.01.22 10:13:35] ned: or bot text
[11.01.22 10:13:38] elliott: there is a general rule
[11.01.22 10:13:48] ned: that is the general rule
[11.01.22 10:13:57] ned: and not even more of a tongue twister
[11.01.22 10:13:59] ned: but the language itself
[11.01.22 10:14:05] elliott: if you need a solution that looks fucked up and works fucked up, stop and revise the architecture, 101% you designed something wrong
[11.01.22 10:14:10] ned: since 11 smartpoints are used
[11.01.22 10:14:52] elliott: i remember that feeling from c++ when you can't fucking figure out how to work here, but then it goes away, it's just not php and you take as much memory as you need
[11.01.22 10:14:55] ned: thanks, I see why I wrote that
[11.01.22 10:15:39] elliott: I'd also google such things on stackoverflow, hundred percent, it's been discussed there more than once, if there's a way to allocate memory automatically, it will be there
[11.01.22 10:15:51] elliott: maybe it's better to get a ready-made one that works exactly as expected
[11.01.22 10:16:04] ned: there is only a pointer on the stack
[11.01.22 10:16:10] ned: and the memory is from the heap
[11.01.22 10:16:18] ned: it is ready
[11.01.22 10:16:30] ned: more ready only a=0;
[11.01.22 10:16:33] elliott: and you're sure that when stack crashes this backspace, the heap will split correctly?
[11.01.22 10:16:41] elliott: I don't give a fuck
[11.01.22 10:16:42] ned: sure you do.
[11.01.22 10:16:54] elliott: read the standard
[11.01.22 10:17:03] ned: I wrote from the standard
[11.01.22 10:17:21] elliott: well, if they put it in the standard, then what can I add
[11.01.22 10:17:32] elliott: c++ turns into pxp)
[11.01.22 10:17:38] ned: c11+
[11.01.22 10:17:41] ned: standard
[11.01.22 10:17:51] ned: 2011
[11.01.22 10:18:00] elliott: I haven't worked on it
[11.01.22 10:18:10] ned: so I'm on c22 now
[11.01.22 10:18:23] ned: studio2022
[11.01.22 10:18:35] elliott: run it through studio profiler, if it's not leaking, fuck it
[11.01.22 10:18:37] ned: c20+ actually
[11.01.22 10:18:46] ned: okay
[11.01.22 10:18:52] ned: thank you.
[11.01.22 10:19:26] elliott: the idea is not new, I've even met it somewhere, to allocate memory on stack from heap, but I vaguely remember, maybe from sobes...
[11.01.22 10:19:38] elliott: dick knows where exactly I heard about it
[11.01.22 10:19:49] ned: memory is not on the stack here
[11.01.22 10:19:55] ned: the pointer is on the stack
[11.01.22 10:20:00] elliott: you are holding a pointer to a heap on the stack
[11.01.22 10:20:03] elliott: that's what I mean
[11.01.22 10:20:06] ned: and when it's time to write it off it takes over
[11.01.22 10:20:20] ned: it's like a deletion and causes a destructor
[11.01.22 10:20:29] ned: that's where the heap is released
[11.01.22 10:21:16] ned: it's good that after each visibility check it cleans
[11.01.22 10:21:28] ned: no need to look at the brackets hierarchy
[11.01.22 10:23:48] ned: moreover all detects disappeared after I inserted this macro
[11.01.22 10:24:35] elliott: yes, they say that if you use smartart, all the created objects will be correctly destroyed when you leave the scope
[11.01.22 10:25:04] ned: there, positive criticism goes
[11.01.22 10:25:16] elliott: just googled it
[11.01.22 10:25:20] elliott: there is a solution
[11.01.22 10:25:28] elliott: still make sure your memory's intact and God bless.
[11.01.22 10:25:47] ned: not the solution
[11.01.22 10:25:47] ned: it's not my idea
[11.01.22 10:25:49] ned: I wrote the shortest way to place memory
[11.01.22 10:26:04] ned: there is only variable name, type and size
[11.01.22 10:26:11] ned: and no mention of anything
[11.01.22 10:26:53] ned: that is abstraction
[11.01.22 10:26:54] ned: and the array can be both broad symbols and ints
[11.01.22 10:26:59] ned: and bytes
